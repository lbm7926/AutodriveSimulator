/**
 * Copyright (c) 2019 LG Electronics, Inc.
 *
 * This software contains code licensed as described in LICENSE.
 *
 */

// TODO: Group shared memory can be used in multiple kernels to improve performance

// NOTE: Vulkan has a bug with texture channel optimization (last confirmed in 2019.3.3f1),
//       hence the shader API specific workarounds in code

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/TextureXR.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#pragma only_renderers d3d11 vulkan metal

#pragma kernel SetupCopy                        SETUP_COPY=SetupCopy
#pragma kernel SetupCopyLinearDepth             SETUP_COPY=SetupCopyLinearDepth                     PC_LINEAR_DEPTH
#pragma kernel SetupCopyFF                      SETUP_COPY=SetupCopyFF                                                  FORCE_FILL
#pragma kernel SetupCopyLinearDepthFF           SETUP_COPY=SetupCopyLinearDepthFF                   PC_LINEAR_DEPTH     FORCE_FILL
#pragma kernel SetupCopySky                     SETUP_COPY=SetupCopySky                                                                 BLEND_SKY
#pragma kernel SetupCopyLinearDepthSky          SETUP_COPY=SetupCopyLinearDepthSky                  PC_LINEAR_DEPTH                     BLEND_SKY
#pragma kernel SetupCopyFFSky                   SETUP_COPY=SetupCopyFFSky                                               FORCE_FILL      BLEND_SKY
#pragma kernel SetupCopyLinearDepthFFSky        SETUP_COPY=SetupCopyLinearDepthFFSky                PC_LINEAR_DEPTH     FORCE_FILL      BLEND_SKY
#pragma kernel Downsample
#pragma kernel RemoveHidden                     REMOVE_HIDDEN=RemoveHidden
#pragma kernel RemoveHiddenDebug                REMOVE_HIDDEN=RemoveHiddenDebug                                         DEBUG_CASCADES
#pragma kernel ApplyPreviousFrame
#pragma kernel PullKernel
#pragma kernel PushKernel
#pragma kernel CalculateNormals                 CALCULATE_NORMALS=CalculateNormals
#pragma kernel CalculateNormalsLinearDepth      CALCULATE_NORMALS=CalculateNormalsLinearDepth       PC_LINEAR_DEPTH
#pragma kernel CalculateNormalsMS               CALCULATE_NORMALS=CalculateNormalsMS                                    MULTI_SAMPLE
#pragma kernel CalculateNormalsLinearDepthMS    CALCULATE_NORMALS=CalculateNormalsLinearDepthMS     PC_LINEAR_DEPTH     MULTI_SAMPLE
#pragma kernel SmoothNormals                    SMOOTH_NORMALS=SmoothNormals
#pragma kernel SmoothNormalsLinearDepth         SMOOTH_NORMALS=SmoothNormalsLinearDepth             PC_LINEAR_DEPTH
#pragma kernel SmoothNormalsDebug               SMOOTH_NORMALS=SmoothNormalsDebug                                       DEBUG_CASCADES
#pragma kernel SmoothNormalsLinearDepthDebug    SMOOTH_NORMALS=SmoothNormalsLinearDepthDebug        PC_LINEAR_DEPTH     DEBUG_CASCADES

static const uint BLOCKSIZE = 8;

CBUFFER_START(cb0)
    // Shared lookup variables
    float4 _TexSize;                // Rendering resolution: x: width-1, y: height-1, z: 1/width, w: 1/height
    float4 _FullRTSize;             // Full resolution of RT (xyzw like _TexSize)
    float4 _MipTexSize;             // Max position on currently processed mip level (xyzw like _TexSize)
    float4 _HigherMipTexSize;       // Max position on one level higher mip (xyzw like _TexSize)
    float _FarPlane;                // Camera's far plane value
    float4x4 _Proj;                 // Projection matrix
    float4x4 _InverseProj;          // Inverse projection matrix
    float4x4 _InverseVP;            // Inevrse VP matrix (note: ignores camera-relative rendering)

    // Copy/setup params
    float _HorizonThreshold = -0.2;
    float4 _InverseSRMulVec;

    // Temporal smoothing parameters
    float4x4 _PrevToCurrentMatrix;
    float _FramePersistence;

    // Remove hidden parameters
    float _RemoveHiddenCascadesOffset;
    float _RemoveHiddenCascadesSize;
    int _RemoveHiddenLevelCount;
    int _RemoveHiddenLevel = 0;

    // Pull kernel parameters
    int _PullInputLevel;
    int _PullSkipWeightMul = 0;
    float _PullFilterParam = 4;

    // Push kernel parameters
    int _PushInputLevel;

    // Smooth normals parameters
    float _SmoothNormalsCascadesOffset;
    float _SmoothNormalsCascadesSize;
CBUFFER_END

// ============================================================================================
// UTILS
// ============================================================================================

SamplerState sampler_LinearClamp;

float2 PackRGB(float3 rgb)
{
    // TODO: Either pack or unpack loses R channel data when B is exactly zero - fix
    rgb.r = max(rgb.r, 0.0001);
    rgb = saturate(rgb);
    // NOTE: green channel is left as is because there is enough space and it can be used to
    //       debug throughout the pipeline
    return float2(asfloat(f32tof16(rgb.r) | f32tof16(rgb.b) << 16), rgb.g);
}

float3 UnpackRGB(float2 packed)
{
    uint r = asuint(packed.r);
    float3 rgb = float3(f16tof32(r), packed.g, f16tof32(r >> 16));
    return rgb;
}

// ============================================================================================
// COPY
// ============================================================================================

Texture2D<float4> _SetupCopyInput;
Texture2D<float> _SetupCopyInputPos;
RWTexture2D<float4> _SetupCopyPosition;
RWTexture2D<float4> _SetupCopyColor;
TEXTURE2D_X(_PostSkyPreRenderColorTexture);

[numthreads(BLOCKSIZE, BLOCKSIZE, 1)]
void SETUP_COPY(uint3 id : SV_DispatchThreadID)
{
    if (id.x > (uint) _TexSize.x || id.y > (uint) _TexSize.y)
        return;

    uint3 input = uint3(id.xy, 0);
    float4 color = _SetupCopyInput.Load(input);
    float pos = _SetupCopyInputPos.Load(input);

    float2 uv = id.xy * _TexSize.zw + 0.5 * _TexSize.zw;
    float x = uv.x * 2.0f - 1.0f;
    float y = (1.0 - uv.y) * 2.0f - 1.0f;
    float4 projPos = float4(x, y, pos, 1.0f);
    float4 viewPos = mul(_InverseProj, projPos);
    viewPos /= viewPos.w;

    viewPos.z = -viewPos.z;
    if (color.w == 0 && id.x <= (uint) _TexSize.x && id.y <= (uint) _TexSize.y)
    {
        viewPos.z = _FarPlane;
        #ifdef BLEND_SKY
            float2 skyUv = uv * _InverseSRMulVec.x + _InverseSRMulVec.yz;
            float3 sky = SAMPLE_TEXTURE2D_X_LOD(_PostSkyPreRenderColorTexture, sampler_LinearClamp, skyUv, 0).rgb;
            color.rgb = sky;
        #endif
    }

    #ifdef PC_LINEAR_DEPTH
    pos = 1.0 - Linear01Depth(pos, _ZBufferParams);
    #endif

    float3 positionWS = mul(_InverseVP, projPos).xyz;
    float3 worldDir = normalize(positionWS - GetPrimaryCameraPosition());

    #ifdef FORCE_FILL
    // Always fill holes below horizon line
    if (worldDir.y > _HorizonThreshold)
    #endif
        color.w = 1;

    float weight = min(color.w, 1);
    float2 weightedColor = PackRGB(color.rgb * weight);

    _SetupCopyPosition[id.xy] = float4(viewPos.xyz, 0);
    _SetupCopyColor[id.xy] = float4(weightedColor, weight, pos);
}

// ============================================================================================
// DOWNSAMPLE
// ============================================================================================

RWTexture2D<float4> _DownsampleInput;
RWTexture2D<float4> _DownsampleOutput;

[numthreads(BLOCKSIZE, BLOCKSIZE, 1)]
void Downsample(uint3 id : SV_DispatchThreadID)
{
    uint2 maxPos = _MipTexSize.xy;
    uint2 pos = min(id.xy*2, maxPos);

    float4 a = _DownsampleInput.Load(min(pos + uint2(0, 0), maxPos));
    float4 b = _DownsampleInput.Load(min(pos + uint2(0, 1), maxPos));
    float4 c = _DownsampleInput.Load(min(pos + uint2(1, 0), maxPos));
    float4 d = _DownsampleInput.Load(min(pos + uint2(1, 1), maxPos));

    float4 r;
    if (a.z < b.z && a.z < c.z && a.z < d.z)
        r = a;
    else if (b.z < c.z && b.z < d.z)
        r = b;
    else if (c.z < d.z)
        r = c;
    else
        r = d;
    _DownsampleOutput[id.xy] = r;
}

// ============================================================================================
// REMOVE HIDDEN
// ============================================================================================

Texture2D<float4> _RemoveHiddenPosition;
RWTexture2D<float4> _RemoveHiddenColor;
RWTexture2D<float4> _RemoveHiddenDepthBuffer;

float GetOcclusion(float4 x, float4 y)
{
    return 1 - dot(normalize(y.xyz - x.xyz), -normalize(y.xyz));
}

float GetMinOcclusion(float4 pix, uint2 base, int2 delta, int maxlevel)
{
    int2 maxPos = (int2)_TexSize.xy;
    int2 pos = base + delta;

    if (pos.x >= maxPos.x || pos.y >= maxPos.y || pos.x < 0 || pos.y < 0)
        return 0.0;
    else
    {
        float4 other = _RemoveHiddenPosition.Load(int3(pos, 0));
        float o = GetOcclusion(pix, other);

        for (int level = 1; level <= maxlevel; level++)
        {
            maxPos = ((int2)_TexSize.xy + 1) >> level;
            pos = ((int2)base >> level) + delta;

            if (pos.x >= maxPos.x || pos.y >= maxPos.y || pos.x < 0 || pos.y < 0)
                return 0.0;
            else
            {
                other = _RemoveHiddenPosition.Load(int3(pos, level));
                o = min(o, GetOcclusion(pix, other));
            }
        }

        return o;
    }
}

[numthreads(BLOCKSIZE, BLOCKSIZE, 1)]
void REMOVE_HIDDEN(uint3 id : SV_DispatchThreadID)
{
    float4 pix = _RemoveHiddenPosition.Load(int3(id.xy, 0));
    float4 packed = _RemoveHiddenColor.Load(id.xy);
    float3 col = UnpackRGB(packed.rg);

    int maxlevel;
    if (_RemoveHiddenLevel == 0)
    {
        int depthLevel = 4;
        float z = _RemoveHiddenPosition.Load(int3(id.xy >> depthLevel, depthLevel)).z;
        maxlevel = (int)(log2(_RemoveHiddenCascadesOffset / z) / _RemoveHiddenCascadesSize);
    }
    else
    {
        maxlevel = _RemoveHiddenLevel;
    }
    maxlevel = clamp(maxlevel, 0, _RemoveHiddenLevelCount - 1);

    float avg = 0;
    avg += GetMinOcclusion(pix, id.xy, int2(-1, -1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(0, -1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(1, -1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(-1, 0), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(1, 0), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(-1, 1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(0, 1), maxlevel);
    avg += GetMinOcclusion(pix, id.xy, int2(1, 1), maxlevel);
    avg /= 8;

    if (avg < 0.1f)
    {
        // col = float4(1,1,1,0);
        // TODO: this might not be needed, check
        col = float3(0, 0, 0);
        _RemoveHiddenColor[id.xy] = float4(PackRGB(col), 0, 0);
        // pix.z = 0;
        
    }
#if DEBUG_CASCADES
    else
    {
        float ratio = (float) maxlevel / (_RemoveHiddenLevelCount - 1);
        float3 debugColor = lerp(float3(0, 0, 1), float3(0, 1, 0), ratio);
        col = lerp(col * debugColor, debugColor, 0.5);
        packed.rg = PackRGB(col);
        _RemoveHiddenColor[id.xy] = packed;
    }
#endif

    // _RemoveHiddenDepthBuffer[id.xy] = pix;
}

// ============================================================================================
// APPLY PREVIOUS FRAME
// ============================================================================================

Texture2D<float4> _PrevColorSaved;
Texture2D<float4> _PrevPosSaved;
RWTexture2D<float4> _PrevColorCurrent;
RWTexture2D<float4> _PrevPosCurrent;

#ifdef SHADER_API_VULKAN
Texture2D<float4> _PrevColorCurrentIn;
Texture2D<float4> _PrevPosCurrentIn;
#endif

[numthreads(BLOCKSIZE, BLOCKSIZE, 1)]
void ApplyPreviousFrame(uint3 id : SV_DispatchThreadID)
{
    int3 input = int3(min(id.xy, (uint2) _TexSize.xy), 0);
    int2 fullTexSize = _TexSize.xy + 1;

    float4 cameraPos = _PrevPosSaved.Load(input);
    // W coordinate is normalized to 1, but channel was used to store something else
    cameraPos.w = 1;
    cameraPos.z = -cameraPos.z;
    float4 newCameraPos = mul(_PrevToCurrentMatrix, cameraPos);
    newCameraPos.xy /= newCameraPos.w;

    float4 prevScreenPos = mul(_Proj, newCameraPos);
    prevScreenPos /= prevScreenPos.w;
    prevScreenPos.xy = (prevScreenPos.xy + 1) * 0.5;

    // TODO: Y-axis movement is broken, most likely due to reversed Y - investigate
// #if UNITY_UV_STARTS_AT_TOP
//     prevScreenPos.y = 1 - prevScreenPos.y;
// #endif

    // int2 newPos = int2(float2(prevScreenPos.x * (_TexSize.x + 1), prevScreenPos.y * (_TexSize.y + 1)));
    int2 newPos = prevScreenPos.xy * fullTexSize;
    #ifdef SHADER_API_VULKAN
        int3 newPosFull = int3(newPos, 0);
        float4 currCameraPos = _PrevPosCurrentIn.Load(newPosFull);
    #else
        float4 currCameraPos = _PrevPosCurrent.Load(newPos);
    #endif

    if (newPos.x >= 0 && newPos.y >= 0 && newPos.x <= (int) _TexSize.x && newPos.y <= (int) _TexSize.y)
    {
        float4 prevCol = _PrevColorSaved.Load(input);
        float reducedWeight = max(0, prevCol.w - _FramePersistence);
        // float reducedWeight = prevCol.w;

        #ifdef SHADER_API_VULKAN
            float4 currCol = _PrevColorCurrentIn.Load(newPosFull);
        #else
            float4 currCol = _PrevColorCurrent.Load(newPos);
        #endif
        
        if (cameraPos.z > (0.1 - _FarPlane) && currCameraPos.z > newCameraPos.z && reducedWeight > currCol.w)
        {
            prevCol = float4(prevCol.rgb / prevCol.w * reducedWeight, reducedWeight);
            // float depthWeighted = (_FarPlane + newCameraPos.z) * reducedWeight;
            _PrevColorCurrent[newPos] = prevCol;
            newCameraPos.z = -newCameraPos.z;
            float depthWeighted = prevScreenPos.z * reducedWeight;
            _PrevPosCurrent[newPos] = float4(newCameraPos.xyz, depthWeighted);
        }
    }
}

// ============================================================================================
// PULL
// ============================================================================================

#ifdef SHADER_API_VULKAN
Texture2D<float4> _PullColorInput;
Texture2D<float4> _PullDepthBufferInput;
#else
RWTexture2D<float4> _PullColorInput;
RWTexture2D<float4> _PullDepthBufferInput;
#endif

RWTexture2D<float4> _PullColorOutput;
RWTexture2D<float4> _PullDepthBufferOutput;

static const uint TILE_BORDER = 1;
static const uint TILE_SIZE = BLOCKSIZE * 2 + TILE_BORDER * 2;

// Separate channels to reduce stride
groupshared float gs_cacheR[TILE_SIZE*TILE_SIZE];
groupshared float gs_cacheG[TILE_SIZE*TILE_SIZE];
groupshared float gs_cacheB[TILE_SIZE*TILE_SIZE];
groupshared float gs_cacheA[TILE_SIZE*TILE_SIZE];
groupshared float gs_cacheD[TILE_SIZE*TILE_SIZE];

static const uint SAMPLE_COUNT = 12;
// Sampling pattern:
// -- 00 01 --
// 02 03 04 05
// 06 07 08 09
// -- 10 11 --
// Offsets in 1D array, calculated from 00
static int SAMPLE_OFFSETS[SAMPLE_COUNT] =
{
    /*00*/ 0,
    /*01*/ 1,
    /*02*/ TILE_SIZE - 1,
    /*03*/ TILE_SIZE,
    /*04*/ TILE_SIZE + 1,
    /*05*/ TILE_SIZE + 2,
    /*06*/ 2 * TILE_SIZE - 1,
    /*07*/ 2 * TILE_SIZE,
    /*08*/ 2 * TILE_SIZE + 1,
    /*09*/ 2 * TILE_SIZE + 2,
    /*10*/ 3 * TILE_SIZE,
    /*11*/ 3 * TILE_SIZE + 1
};

static const float WEIGHT_CENTER = 0.15;
static const float WEIGHT_EDGE = 0.05;

static float SAMPLE_WEIGHTS[SAMPLE_COUNT] =
{
    /*00*/ WEIGHT_EDGE,
    /*01*/ WEIGHT_EDGE,
    /*02*/ WEIGHT_EDGE,
    /*03*/ WEIGHT_CENTER,
    /*04*/ WEIGHT_CENTER,
    /*05*/ WEIGHT_EDGE,
    /*06*/ WEIGHT_EDGE,
    /*07*/ WEIGHT_CENTER,
    /*08*/ WEIGHT_CENTER,
    /*09*/ WEIGHT_EDGE,
    /*10*/ WEIGHT_EDGE,
    /*11*/ WEIGHT_EDGE,
};

int2 PullUnflatten(int idx)
{
  return int2(idx % TILE_SIZE, idx / TILE_SIZE);
}

int PullFlatten(int2 coord)
{
  return coord.x + coord.y * TILE_SIZE;
}

void StorePixel(uint index, float4 pixel, float depth)
{
    gs_cacheR[index] = pixel.r;
    gs_cacheG[index] = pixel.g;
    gs_cacheB[index] = pixel.b;
    gs_cacheA[index] = pixel.a;
    gs_cacheD[index] = depth;
}

void LoadPixel(uint index, out float4 pixel, out float depth)
{
    float4 p;
    p.r = gs_cacheR[index];
    p.g = gs_cacheG[index];
    p.b = gs_cacheB[index];
    p.a = gs_cacheA[index];
    float d = gs_cacheD[index];

    pixel = p;
    depth = d;
}

[numthreads(BLOCKSIZE, BLOCKSIZE, 1)]
void PullKernel(uint3 id : SV_DispatchThreadID, uint2 groupId : SV_GroupID, uint3 gtId : SV_GroupThreadID, uint groupIndex : SV_GroupIndex)
{
    // Upper-left pixel coordinate of this tile's part of input image (lower mip)
    // Note that threads are dispatched based on higher mip's size
    const int2 blockStartCoord = groupId.xy * BLOCKSIZE * 2 - TILE_BORDER;
    uint2 size = (uint2) _MipTexSize.xy;

    // Load pixels assigned to this thread and store them in LDS
    for (uint t = groupIndex; t < TILE_SIZE * TILE_SIZE; t += BLOCKSIZE * BLOCKSIZE)
    {
        const uint2 input = blockStartCoord + PullUnflatten(t);
        #if SHADER_API_VULKAN
            uint3 pos = uint3(input, _PullInputLevel);
        #else
            uint2 pos = input;
        #endif
        
        float4 rgbw;
        float depth;

        if (input.x < 0 || input.y < 0 || input.x > size.x || input.y > size.y)
        {
            rgbw = float4(0,0,0,0);
            depth = 0.0;
        }
        else
        {
            float4 packed = _PullColorInput.Load(pos);
            rgbw = float4(UnpackRGB(packed.rg), packed.b);
            depth = packed.w;
            // depth = _PullDepthBufferInput.Load(pos).w;
        }
        StorePixel(t, rgbw, depth);
    }

    GroupMemoryBarrierWithGroupSync();

    uint2 idMax = (uint2) _HigherMipTexSize.xy;
    if (id.x > idMax.x || id.y > idMax.y)
        return;

    uint p00 = PullFlatten(TILE_BORDER + gtId.xy * 2 + int2(0, -1));
    float wn = 0;
    float3 sum = 0;
    float dsum = 0;

    [unroll(SAMPLE_COUNT)]
    for (uint i = 0; i < SAMPLE_COUNT; ++i)
    {
        float4 p;
        float d;
        LoadPixel(p00 + SAMPLE_OFFSETS[i], p, d);
        p *= SAMPLE_WEIGHTS[i];
        d *= SAMPLE_WEIGHTS[i];
        wn += p.w;
        sum += p.rgb;
        dsum += d;
    }

    float wwn = 1 - pow(abs(1 - wn), _PullFilterParam);

    float4 col = float4(0, 0, 0, 0);
    float depth = 0;

    if (wn > 0)
    {
        float w = (_PullSkipWeightMul == 1 ? 1 : wwn) / wn;
        col = float4(w * sum, wwn);
        depth = w * dsum;
    }

    _PullColorOutput[id.xy] = float4(PackRGB(col.rgb), col.w, depth);
    // _PullDepthBufferOutput[id.xy] = float4(0, 0, 0, depth);
}

// ============================================================================================
// PUSH
// ============================================================================================

#ifdef SHADER_API_VULKAN
Texture2D<float4> _PushColorInput;
Texture2D<float4> _PushDepthBufferInput;
#else
RWTexture2D<float4> _PushColorInput;
RWTexture2D<float4> _PushDepthBufferInput;
#endif

RWTexture2D<float4> _PushColorOutput;
RWTexture2D<float4> _PushDepthBufferOutput;

#ifdef SHADER_API_VULKAN
float4 SampleInBounds(Texture2D<float4> tex, int3 coord, int2 maxPos, float weight, inout float weightSum)
#else
float4 SampleInBounds(RWTexture2D<float4> tex, int2 coord, int2 maxPos, float weight, inout float weightSum)
#endif
{
    if (coord.x < 0 || coord.y < 0 || coord.x > maxPos.x || coord.y > maxPos.y)
    {
        weightSum -= weight;
        return float4(0, 0, 0, 0);
    }
    else
    {
        float4 packed = tex.Load(coord);
        return weight * float4(UnpackRGB(packed.rg), packed.w);
    }
}

[numthreads(BLOCKSIZE, BLOCKSIZE, 1)]
void PushKernel(uint3 id : SV_DispatchThreadID)
{
    if (id.x > (uint) _MipTexSize.x || id.y > (uint) _MipTexSize.y)
        return;

    uint2 maxPos = _HigherMipTexSize.xy;

    int2 xy2 = id.xy / 2;
    int2 mod2 = id.xy % 2;
    int3 offset = int3(mod2 * 2 - int2(1, 1), 0);

    float4 x = _PushColorOutput.Load(id.xy);
    // float baseWeight = x.b;
    // float4 xUnpacked = float4(UnpackRGB(x.rg), x.w);
    // float4 n = _PushDepthBufferOutput.Load(id.xy);

    float4 weights = float4(9.0/16.0, 3.0/16.0, 3.0/16.0, 1.0/16.0);

    #ifdef SHADER_API_VULKAN
        int3 sampleA = uint3(xy2 + offset.zz, _PushInputLevel);
        int3 sampleB = uint3(xy2 + offset.zy, _PushInputLevel);
        int3 sampleC = uint3(xy2 + offset.xz, _PushInputLevel);
        int3 sampleD = uint3(xy2 + offset.xy, _PushInputLevel);
    #else
        int2 sampleA = xy2 + offset.zz;
        int2 sampleB = xy2 + offset.zy;
        int2 sampleC = xy2 + offset.xz;
        int2 sampleD = xy2 + offset.xy;
    #endif

    float weightSum = 1.0;

    float4 a = SampleInBounds(_PushColorInput, sampleA, maxPos, weights.r, weightSum);
    float4 b = SampleInBounds(_PushColorInput, sampleB, maxPos, weights.g, weightSum);
    float4 c = SampleInBounds(_PushColorInput, sampleC, maxPos, weights.b, weightSum);
    float4 d = SampleInBounds(_PushColorInput, sampleD, maxPos, weights.a, weightSum);

    // float na = SampleInBounds(_PushDepthBufferInput, sampleA, maxPos, weights.r).w;
    // float nb = SampleInBounds(_PushDepthBufferInput, sampleB, maxPos, weights.g).w;
    // float nc = SampleInBounds(_PushDepthBufferInput, sampleC, maxPos, weights.b).w;
    // float nd = SampleInBounds(_PushDepthBufferInput, sampleD, maxPos, weights.a).w;

    float4 ni = a + b + c + d;
    if (weightSum > 0)
        ni /= weightSum;
    else
        ni = float4(0,0,0,0);

    // float4 nn = ni * (1 - baseWeight) + xUnpacked;
    float4 xUnpacked = float4(UnpackRGB(x.rg), x.w);
    float4 xn = ni * (1 - x.b) + xUnpacked;
    // n.w = dn;

    /*
    float3 ni = a.rgb + b.rgb + c.rgb + d.rgb;
    ni /= weightSum;
    float di = na + nb + nc + nd;
    di /= weightSum;

    float3 xn = ni * (1 - x.w) + x.rgb;
    float dn = di * (1 - x.w) + n.w;
    n.w = dn;
    */

    // TODO: verify weight pushed here
    _PushColorOutput[id.xy] = float4(PackRGB(xn.rgb), x.b, xn.w);
    // _PushDepthBufferOutput[id.xy] = n;
}

// ============================================================================================
// CALCULATE NORMALS
// ============================================================================================

int _CalcNormalsInputLevel;
Texture2D<float4> _NormalsIn;
RWTexture2D<float4> _NormalsOut;

float3 ReconstructPosition(int2 pos, float z)
{
    float2 uv = pos * _MipTexSize.zw + 0.5 * _MipTexSize.zw;

    float x = uv.x * 2.0f - 1.0f;
    float y = (1.0 - uv.y) * 2.0f - 1.0f;

    #ifdef PC_LINEAR_DEPTH
        float eyeDepth = (1 / (1.0-z) - _ZBufferParams.y) / _ZBufferParams.x;
    #else
        float eyeDepth = z;
    #endif
    
    float4 positionSS = float4(x, y, eyeDepth, 1.0f);
    float4 positionWS = mul(_InverseVP, positionSS);
    return positionWS.xyz / positionWS.w;
}

[numthreads(8, 8, 1)]
void CALCULATE_NORMALS(uint3 id : SV_DispatchThreadID)
{
    uint2 size = (uint2) _MipTexSize.xy;
    if (id.x > size.x || id.y > size.y)
        return;

    #ifndef MULTI_SAMPLE
        int2 offset = int2(id.x == size.x ? -1 : 1, id.y == size.y ? -1 : 1);
    #else
        int2 offset = int2(1, 1);
    #endif

    int2 sc = id.xy;
    int2 sr = id.xy + uint2(offset.x, 0);
    int2 su = id.xy + uint2(0, offset.y);

    float dc = _NormalsIn.Load(int3(sc, _CalcNormalsInputLevel)).w;
    float dr = _NormalsIn.Load(int3(sr, _CalcNormalsInputLevel)).w;
    float du = _NormalsIn.Load(int3(su, _CalcNormalsInputLevel)).w;

    #ifdef MULTI_SAMPLE
        int2 sl = id.xy + uint2(-offset.x, 0);
        int2 sd = id.xy + uint2(0, -offset.y);

        float dd = _NormalsIn.Load(int3(sd, _CalcNormalsInputLevel)).w;
        float dl = _NormalsIn.Load(int3(sl, _CalcNormalsInputLevel)).w;
    #endif

    float3 xVec, yVec, nVec;
    float3 pc = ReconstructPosition(sc, dc);

    #ifdef MULTI_SAMPLE
        if (abs(du - dc) < abs(dd - dc))
            yVec = ReconstructPosition(su, du) - pc;
        else
            yVec = pc - ReconstructPosition(sd, dd);

        if (abs(dr - dc) < abs(dl - dc))
            xVec = ReconstructPosition(sr, dr) - pc;
        else
            xVec = pc - ReconstructPosition(sl, dl);

        nVec = normalize(cross(yVec, xVec));
    #else
        yVec = ReconstructPosition(su, du) - pc;
        xVec = ReconstructPosition(sr, dr) - pc;

        nVec = normalize(offset.x + offset.y == 0 ? cross(xVec, yVec) : cross(yVec, xVec));
    #endif

    _NormalsOut[id.xy] = float4(nVec, dc);
}

// ============================================================================================
// SMOOTH NORMALS
// ============================================================================================

Texture2D<float4> _SmoothNormalsIn;
RWTexture2D<float4> _SmoothNormalsOut;
RWTexture2D<float4> _SmoothNormalsColorDebug;

[numthreads(BLOCKSIZE, BLOCKSIZE, 1)]
void SMOOTH_NORMALS(uint3 id : SV_DispatchThreadID)
{
    float4 inSample = _SmoothNormalsIn.Load(int3(id.xy, 0));
    float2 uv = id.xy * _FullRTSize.zw + 0.5 * _FullRTSize.zw;

    #ifdef PC_LINEAR_DEPTH
        float z = (1 / (1.0-inSample.w) - _ZBufferParams.y) / _ZBufferParams.x;
    #else
        float z = inSample.w;
    #endif

    float4 viewPos = mul(_InverseProj, float4(2 * uv - 1, z, 1));
    viewPos /= viewPos.w;
    viewPos.z = -viewPos.z;
    float level = (log2(_SmoothNormalsCascadesOffset / viewPos.z) / _SmoothNormalsCascadesSize);
    uint lowLevel = max(0, (uint) level);
    uint highLevel = min(level + 1, _RemoveHiddenLevelCount - 1);

    float4 lowSample = SAMPLE_TEXTURE2D_LOD(_SmoothNormalsIn, sampler_LinearClamp, uv, lowLevel);
    float4 highSample = SAMPLE_TEXTURE2D_LOD(_SmoothNormalsIn, sampler_LinearClamp, uv, highLevel);
    
    float3 vec = lerp(lowSample.xyz, highSample.xyz, frac(level));
    _SmoothNormalsOut[id.xy] = float4(normalize(vec), inSample.w);

#if DEBUG_CASCADES
    float4 col = _SmoothNormalsColorDebug.Load(id.xy);
    float ratio = level / (_RemoveHiddenLevelCount - 1);
    float3 debugColor = lerp(float3(0, 0, 1), float3(0, 1, 0), ratio);
    col.rgb = lerp(col.rgb * debugColor, debugColor, 0.5);
    _SmoothNormalsColorDebug[id.xy] = col;
#endif
}